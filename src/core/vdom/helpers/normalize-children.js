/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
/**
 * render 函数是编译生成时会被调用 ===>
 * 一般场景下编译生成的 children 都已经是 VNode 类型的，
 * 但有一个例外，就是 functional component 返回的是一个数组而不是一个根节点，
 * 所以会通过 Array.prototype.concat 方法把整个 children 数组打平，让它的深度只有一层。
 * @param {*} children
 */
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/**
 * 调用场景一：render 函数是用户手写
 * 调用场景二：编译 <template>, <slot>, v-for 的时候
 * @param {*} children
 */
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]   // 手写 render function 时只返回一个简单类型的单文本节点
    : Array.isArray(children)       // 编译 <template>, <slot>, v-for 产生嵌套数组
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

/**
 * 规范化子节点数组
 * 1、如果是数组，则递归调用 normalizeArrayChildren
 * 2、如果是基础类型，则通过 createTextVNode 转换成 VNode
 * 3、已经是 VNode 类型
 * @param {*} children 需要规范的子节点
 * @param {*} nestedIndex 嵌套索引 _0 => _0_1 => _0_1_2
 */
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]

    // undefined 或 boolean 不渲染
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        // 1、子节点仍是数组，递归调用 normalizeArrayChildren
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)

        // merge adjacent text nodes
        // 如果上一层 children 的最后一个节点是文本，这一层 children 的第一个也是文本，那么就合并
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {
      // 如果当前子节点为简单类型
      if (isTextNode(last)) {
        // 且上一层 children 的最后一个节点是文本，那么就合并
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // 且上一层 children 的最后一个节点不是文本，当前子节点也不为空，就转换为文本节点
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } else {
      // 当前子节点和上一层 children 的最后一个节点都是文本，那么就合并
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 如果子节点没有指定 key，那就生成一个 key
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
